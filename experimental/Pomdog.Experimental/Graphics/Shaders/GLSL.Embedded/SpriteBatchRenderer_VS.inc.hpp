// Copyright (c) 2013-2016 mogemimi. Distributed under the MIT license.

char const* Builtin_GLSL_SpriteBatchRenderer_VS =
"#version 330\n"
"layout(location=0)in vec4 PositionTextureCoord;\n"
"layout(location=1)in vec4 TransformMatrix1;\n"
"layout(location=2)in vec4 TransformMatrix2Origin;\n"
"layout(location=3)in vec4 SourceRect;\n"
"layout(location=4)in vec4 Color;\n"
"layout(location=5)in vec4 TextureIndex;\n"
"out VertexData{\n"
"vec2 TextureCoord;\n"
"vec4 Color;\n"
"float TextureIndex;}Out;\n"
"uniform Matrices{\n"
"mat4x4 ViewProjection;};\n"
"uniform TextureConstants{\n"
"vec4 InverseTextureWidths1;\n"
"vec4 InverseTextureWidths2;};\n"
"vec2 GetInverseTextureWidth(int textureIndex){\n"
"if(textureIndex==0){\n"
"return InverseTextureWidths1.xy;}\n"
"else if(textureIndex==1){\n"
"return InverseTextureWidths1.zw;}\n"
"else if(textureIndex==2){\n"
"return InverseTextureWidths2.xy;}\n"
"return InverseTextureWidths2.zw;}\n"
"void main(){\n"
"mat2x2 scaling=mat2x2(\n"
"vec2(SourceRect.z,0.0),\n"
"vec2(0.0,SourceRect.w));\n"
"vec2 position=(PositionTextureCoord.xy-TransformMatrix2Origin.zw).xy*scaling;\n"
"mat3x2 worldMatrix=mat3x2(\n"
"vec2(TransformMatrix1.xy),\n"
"vec2(TransformMatrix1.zw),\n"
"vec2(TransformMatrix2Origin.xy));\n"
"position=(worldMatrix*vec3(position,1.0)).xy;\n"
"gl_Position=vec4(position.xy,0.0,1.0)*ViewProjection;\n"
"int textureIndex=clamp(int(TextureIndex.x),0,3);\n"
"vec2 inverseTextureWidth=GetInverseTextureWidth(textureIndex);\n"
"Out.TextureCoord=(PositionTextureCoord.zw*SourceRect.zw+SourceRect.xy)*inverseTextureWidth;\n"
"Out.Color=Color;\n"
"Out.TextureIndex=textureIndex;}\n";
