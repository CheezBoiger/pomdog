// Copyright (c) 2013-2015 mogemimi. Distributed under the MIT license.

char const* Builtin_GLSL_FishEye_PS =
"#version 330\n"
"in QuadVertexShaderOutput{\n"
"vec2 TextureCoord;}In;\n"
"uniform ImageEffectConstants{\n"
"vec2 RenderTargetPixelSize;\n"
"vec2 RcpFrame;};\n"
"uniform FishEyeBlock{\n"
"float Strength;};\n"
"uniform sampler2D Texture;\n"
"out vec4 FragColor;\n"
"const float PI=3.1415926535;\n"
"vec2 BasicFishEye(vec2 texCoord){\n"
"const float aperture=178.0;\n"
"float apertureHalf=0.5*aperture*(PI/ 180.0);\n"
"float maxFactor=sin(apertureHalf);\n"
"vec2 xy=2.0*texCoord-1.0;\n"
"float d=length(xy);\n"
"vec2 uv=texCoord;\n"
"if(d<(2.0-maxFactor)){\n"
"d=length(xy*maxFactor);\n"
"float z=sqrt(1.0-d*d);\n"
"float r=atan(d,z)/PI;\n"
"float phi=atan(xy.y,xy.x);\n"
"uv.x=r*cos(phi)+0.5;\n"
"uv.y=r*sin(phi)+0.5;}\n"
"return uv;}\n"
"vec2 FishEye(vec2 texCoord,vec2 resolution,float strength){\n"
"vec2 p=vec2(texCoord.x, texCoord.y*resolution.y/resolution.x);\n"
"float prop=resolution.x/resolution.y;\n"
"vec2 m=vec2(0.5,0.5/prop);\n"
"vec2 d=p-m;\n"
"float r=sqrt(dot(d,d));\n"
"float power=(PI/sqrt(dot(m,m)))*strength;\n"
"float bind=m.y;\n"
"if(power>0.0){\n"
"bind=sqrt(dot(m,m));}\n"
"else{\n"
"if(prop<1.0){\n"
"bind=m.x;}else{\n"
"bind=m.y;}}\n"
"vec2 uv;\n"
"if(power>0.0){\n"
"uv=m+normalize(d)*tan(r*power)*bind/tan(bind*power);}else if(power<0.0){\n"
"uv=m+normalize(d)*atan(r*-power*10.0)*bind/atan(-power*bind*10.0);}else{\n"
"uv=p;}\n"
"uv.y=uv.y*prop;\n"
"return uv;}\n"
"void main(){\n"
"vec2 uv=FishEye(In.TextureCoord.xy,RenderTargetPixelSize.xy,Strength);\n"
"vec4 color=texture(Texture,uv);\n"
"FragColor=color;}\n";
